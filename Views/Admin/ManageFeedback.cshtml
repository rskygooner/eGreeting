@using X.PagedList;
@using X.PagedList.Mvc.Core;
@{
    ViewBag.Title = "ManageFeedback";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
    var pageList = (IPagedList)ViewBag.page;
}


<div class="card shadow mb-4">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Subject</th>
                        <th>Content</th>
                        <th>DataCreated</th>
                        <th>Function</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ViewBag.page)
                    {
                        <tr>
                            <td>@item.Username</td>
                            <td>@item.Subject</td>
                            <td id="Content">@item.Content</td>
                            <td>@item.DataCreated</td>
                            <td>

                                <a class="btn btn-warning" href="/Admin/DetailFeedback/@item.FeedbackId"><i style="color: #fff" class="fas fa-info"></i></a>
                                <a onClick="doDelete(@item.FeedbackId)" href="#" class="btn btn-danger btn-circle">
                                    <i style="color: #fff" class="fas fa-trash"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div>
    @Html.PagedListPager(pageList, page => Url.Action("ManageFeedback", new { page }))
</div>

<script>
    $(document).ready(function () {

        grid_func.init(1);
    });
    var grid_func = {
        init: function (page) {
            var list = this.getData(page);
            $("#gridContainer").dxDataGrid({
                dataSource: list,
                keyExpr: "Id",
                selection: {
                    mode: "single"
                },
                editing: {
                    mode: "row",
                    allowUpdating: true, //
                    allowDeleting: true, //
                    allowAdding: true //
                },
                hoverStateEnabled: true,
                showBorders: true,
                columns: [{
                    caption: "No.",
                    dataField: "myIndex",
                    width: 80
                }, {
                    dataField: "Username",
                    caption: 'Username',
                    width: 120,
                },
                {
                    dataField: "Subject",
                    caption: 'Subject',
                    width: 150,
                },
                {
                    dataField: "Content",
                    caption: 'Content'
                },
                {
                    dataField: "DataCreated",
                    caption: 'DataCreated',
                    width: 100
                }],
                onRowInserted: function (e) {
                    console.log(e);
                    $.ajax({
                        url: '/Admin/InsertFeedback',
                        type: "POST",
                        data: { model: e.key }, // model giong ben controller
                        async: false,
                        success: function (res) {
                            if (res) {
                                grid_func.init(page);
                            }
                        }
                    })
                },
                onRowUpdated: function (e) {
                    console.log(e);
                    $.ajax({
                        url: '/Admin/UpdateFeedback',
                        type: "POST",
                        data: { model: e.data },
                        async: false,
                        success: function (res) {
                            if (res) {
                                grid_func.init(page);
                            }
                        }
                    })
                },
                onRowRemoved: function (e) {
                    console.log(e);
                    $.ajax({
                        url: '/Admin/DeleteFeedbackv2',
                        type: "POST",
                        data: { id: e.key },
                        async: false,
                        success: function (res) {
                            if (!res) {
                                grid_func.init(page);
                            }
                        }
                    })
                }
            });
        },
        getData: function (page) {
            var list = [];
            $.ajax({
                url: '/Admin/getManagerFeedback',
                type: "POST",
                data: { page: page },
                async: false,
                success: function (res) {
                    console.log(res);
                    if (res != null && res != "") {
                        var respone = JSON.parse(res);
                        if (respone.success) {
                            list = respone.data;
                            $("#my-pagination").pagination({
                                items: list.length > 0 ? list[0].total : 0,
                                itemsOnPage: 2,
                                currentPage: page,
                                cssStyle: 'light-theme',
                                onPageClick: function (page, e) {
                                    grid_func.init(page);
                                }
                            });
                        }
                    }
                }
            });
            return list;
        }
    }


    // delete
    // idData là biến truyền vào (đặt tên là gì cũng được)
    function doDelete(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonColor: '#d33'
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    url: "/Admin/DeleteFeedback", // Yêu cầu lấy dữ liệu: /controller/tên hàm
                    type: "POST",
                    data: { id: id }, // id phải giống id truyền vào trong TinTucController Delete
                    success: function (res) {
                        // success là hàm được gọi khi yêu cầu thành công
                        // res là giá trị trả về đặt tên là gì cũng được()
                        if (res) {
                            Swal.fire({
                                title: 'Delete success',
                                text: 'Successfully deleted!',
                                type: 'success'
                            }).then((res2) => {
                                location.reload();
                            });
                        }
                        else {
                            Swal.fire({
                                title: 'Delete failed',
                                text: 'An error occurred while deleting!',
                                type: 'error'
                            })
                        }
                    }
                })
                Swal.fire(
                    'Deleted!',
                    'Your file has been deleted!',
                    'success'
                )
            }
        })
    }

    var lengthContent = $('#Content').text().length;
    if (lengthContent > 50) {
        var newStr = $('#Content').text().substring(0, 50);
        document.getElementById("Content").innerText = newStr + "...";
        $('br').remove();
    }
</script>
